q
@doc.xpath("//*/ref-list/ref/*/pub-id[@pub-id-type='doi']")
@doc.xpath("//*/ref-list/ref/*/ext-link[@ext-link-type='doi']")
@doc.xpath("//*/ref-list/ref/*/ext-link[@ext-link-type='doi']").map(&:text)
@doc.xpath("//*/ref-list//*/ext-link[@ext-link-type='doi']").map(&:text)
@doc.xpath("//*/ref-list/*/ext-link[@ext-link-type='doi']").map(&:text)
@doc.xpath("//*/ext-link[@ext-link-type='doi']").map(&:text)
@doc.xpath("//*/ext-link[@ext-link-type='doi']")
@doc.xpath("//*/ext-link[@ext-link-type='doi'].text")
@doc.xpath("//*/ext-link[@ext-link-type='doi']").to_a
@doc.xpath("//*/ext-link[@ext-link-type='doi']").text
@doc.xpath("//*/ext-link[@ext-link-type='doi']")
@doc.xpath("//*/ref-list/*/ext-link[@ext-link-type='doi']")
@doc.xpath("//*/ref-list/ref/@ext-link-type='doi'")
@doc.xpath("//*/ref-list/ref/[@ext-link-type='doi']")
@doc.xpath("//*/ref-list/ref/ext-link[@ext-link-type='doi']")
@doc.xpath("//*/ref-list/ref")
@doc.xpath("//*/ref-list/ref/")
@doc.xpath("//*/ref-list/*/ext-link[@ext-link-type='doi']")
@doc.xpath("//*/ref-list/*/pub-id[@pub-id-type='doi']")
q
@doc.xpath("//*/article-meta/abstract/*/p").text
q
kwds.map(&:text)
kwds
q
kwds
q
name[11].unpack('H*')[0]
name[5].unpack('H*')[0]
name.unpack('H*')
name.unpack('H*')[0]
name
name.encode("UTF-8", :undef => :replace, :invalid => :replace, :replace => " ").gsub(/\t/,'xxx').split.join(" ")
name.encode("UTF-8", :undef => :replace, :invalid => :replace, :replace => " ").gsub(/\t/,' ').split.join(" ")
name == "David Peter Shorthouse"
name.encode("UTF-8", :undef => :replace, :invalid => :replace, :replace => " ").gsub(/[^[:print:]]/,' ').split.join(" ")
name
q
name.encode("UTF-8", :undef => :replace, :invalid => :replace, :replace => " ").gsub(/\t/, 'xxx').split.join(" ")
name.encode("UTF-8", :undef => :replace, :invalid => :replace, :replace => " ").gsub(/[^[:ascii:]]/,'xxx').split.join(" ")
name = "DavÃ®d Shorthouse"
name.encode("UTF-8", :undef => :replace, :invalid => :replace, :replace => " ").gsub(/[^[:ascii:]]/,'xxx').split.join(" ")
name.encode("UTF-8", :undef => :replace, :invalid => :replace, :replace => " ").gsub(/[^[:print:]]/,'xxx').split.join(" ")
name.encode("UTF-8", :undef => :replace, :invalid => :replace, :replace => " ").gsub(/[^[:graph:]]/,'xxx').split.join(" ")
authors
name.length
name == "David Peter Shorthouse"
name.encode("UTF-8", :undef => :replace, :invalid => :replace, :replace => " ").gsub(/[^[:print:]]/,'xxx').split.join(" ")
name.encode("UTF-8", :undef => :replace, :invalid => :replace, :replace => " ").gsub(/[^[:print:]]/,' ').split.join(" ")
name.encode("UTF-8", :undef => :replace, :invalid => :replace, :replace => "xxxxxx").split.join(" ")
ame.encode("UTF-8", :undef => :replace, :invalid => :replace, :replace => "xxxxxx").split.join(" ")
name
I18n.transliterate(name)
require "active_support/all"
name == "David Peter Shorthouse"
name
name.encode!("UTF-8", :undef => :replace, :invalid => :replace, :replace => " ").split.join(" ")
name
q
name.encode("UTF-8", :undef => :replace, :invalid => :replace, :replace => "")
name.encode("UTF-8", :undef => :replace, :invalid => :replace, :replace => " ")
name
q
abstract
authors
doi
presenting_author
@doc.xpath("//*/subj-group[@subj-group-type='conference-part'/subject")
@doc.xpath("//*/subj-group[@subj-group-type='conference-part'/subject").text
@doc.is_a? Nokogiri::XML::Document
@doc
@doc.is_a? Nokogiri
@doc.type_of?
@doc.type
@doc.type_of
q
author.xpath("name/surname").text
author.xpath("email").text
author.xpath("/email").text
author.xpath("//*/email").text
author.xpath("//*/email")
author.content
author
author.elements
author.values
author.text
author["email"]
author["name"]
author.name
author.email
author
